name: Build & Package All Platforms

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target_os }}-${{ matrix.arch }}-${{ matrix.precision }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        precision: [standard, double]
        include:
          - target_os: linux
            arch: x86_64
            runner: ubuntu-latest
          - target_os: macos
            arch: x86_64
            runner: macos-latest
          - target_os: macos
            arch: arm64
            runner: macos-latest
          - target_os: windows
            arch: x86_64
            runner: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies (Linux)
        if: matrix.target_os == 'linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config libdbus-1-dev protobuf-compiler libprotobuf-dev

      - name: Install build dependencies (macOS)
        if: matrix.target_os == 'macos'
        run: brew install protobuf

      - name: Install build dependencies (Windows)
        if: matrix.target_os == 'windows'
        run: choco install protoc

      - name: Set up Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            external/dojo.c/target
          key: ${{ runner.os }}-cargo-${{ matrix.precision }}-${{ matrix.target_os }}-${{ matrix.arch }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.precision }}-${{ matrix.target_os }}-${{ matrix.arch }}-
            ${{ runner.os }}-cargo-${{ matrix.precision }}-${{ matrix.target_os }}-
            ${{ runner.os }}-cargo-${{ matrix.precision }}-

      - name: Add target for macOS builds
        if: matrix.target_os == 'macos'
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            rustup target add aarch64-apple-darwin
          else
            rustup target add x86_64-apple-darwin
          fi

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            bin/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.precision }}-${{ matrix.target_os }}-${{ matrix.arch }}-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.precision }}-${{ matrix.target_os }}-${{ matrix.arch }}-
            ${{ runner.os }}-scons-${{ matrix.precision }}-${{ matrix.target_os }}-

      - name: Build both (release & debug)
        shell: bash
        run: |
          set -e
          PLATFORM_ARG=""
          ARCH_ARG=""
          PRECISION_ARG=""

          # Set precision argument if building double precision
          if [ "${{ matrix.precision }}" = "double" ]; then
            PRECISION_ARG="precision=double"
          fi

          if [ "${{ matrix.target_os }}" = "macos" ]; then
            PLATFORM_ARG="platform=macos"
            # Set macOS deployment target to 14.0 to ensure compatibility
            export MACOSX_DEPLOYMENT_TARGET=14.0
            # Add deployment target to RUSTFLAGS
            export RUSTFLAGS="${RUSTFLAGS:+$RUSTFLAGS }-C link-arg=-mmacosx-version-min=14.0"
            echo "Setting macOS deployment target to 14.0"
            echo "MACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET"
            echo "RUSTFLAGS=$RUSTFLAGS"

            if [ "${{ matrix.arch }}" = "arm64" ]; then
              ARCH_ARG="arch=arm64"
              export CARGO_BUILD_TARGET=aarch64-apple-darwin
            else
              ARCH_ARG="arch=x86_64"
              export CARGO_BUILD_TARGET=x86_64-apple-darwin
            fi
          elif [ "${{ matrix.target_os }}" = "linux" ]; then
            PLATFORM_ARG="platform=linux"
            ARCH_ARG="arch=x86_64"
            export CARGO_BUILD_TARGET=x86_64-unknown-linux-gnu
          elif [ "${{ matrix.target_os }}" = "windows" ]; then
            PLATFORM_ARG="platform=windows"
            ARCH_ARG="arch=x86_64"
            export CARGO_BUILD_TARGET=x86_64-pc-windows-msvc
          fi

          mkdir -p demo/bin

          # Debug
          scons $PLATFORM_ARG $ARCH_ARG target=template_debug $PRECISION_ARG -j2

          # Release
          scons $PLATFORM_ARG $ARCH_ARG target=template_release $PRECISION_ARG -j2

      - name: Upload binaries for this target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.precision }}-${{ matrix.target_os }}-${{ matrix.arch }}
          path: |
            ${{ matrix.target_os == 'windows' && 'demo/bin/*.dll' || 'demo/bin/*' }}
            demo/bin/*.gdextension
          if-no-files-found: error

  package:
    name: Combine all binaries and create zip files
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract latest changelog entries
        id: changelog
        run: |
          # Extract the latest section from CHANGELOG.md (between the first two ## headers)
          LATEST_CHANGELOG=$(awk '/^## \[Unreleased\]/{flag=1;next}/^## /{if(flag)exit}flag' CHANGELOG.md)
          # Set output using multiline string
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$LATEST_CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download all binaries from jobs
        uses: actions/download-artifact@v4
        with:
          path: all_bins

      - name: Prepare folders for binaries
        run: |
          # Standard precision binaries
          mkdir -p godot-dojo-bin/addons/godot-dojo
          find all_bins/bin-standard-* -type f -exec cp {} godot-dojo-bin/addons/godot-dojo/ \;

          # Double precision binaries
          mkdir -p godot-dojo-double-bin/addons/godot-dojo
          find all_bins/bin-double-* -type f -exec cp {} godot-dojo-double-bin/addons/godot-dojo/ \;

      - name: Package into zip files
        run: |
          TAGNAME=${GITHUB_REF##*/}

          # Standard precision zip
          cd godot-dojo-bin
          zip -r "../godot-dojo-${TAGNAME}.zip" .
          cd ..

          # Double precision zip
          cd godot-dojo-double-bin
          zip -r "../godot-dojo-double-${TAGNAME}.zip" .
          cd ..

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          name: "Release ${{ github.ref_name }}"
          body: |
            ## Latest Changes

            ${{ steps.changelog.outputs.content }}

            ### Downloads
            - [Standard Precision](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/godot-dojo-${{ github.ref_name }}.zip)
            - [Double Precision](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/godot-dojo-double-${{ github.ref_name }}.zip)

            [View full changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
          files: |
            godot-dojo-${{ github.ref_name }}.zip
            godot-dojo-double-${{ github.ref_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
