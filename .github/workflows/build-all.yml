name: Build & Package All Platforms - wip

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target_os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_os: linux
            arch: x86_64
            runner: ubuntu-latest
          - target_os: macos
            arch: x86_64
            runner: macos-latest
          - target_os: macos
            arch: arm64
            runner: macos-latest
          - target_os: windows
            arch: x86_64
            runner: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Install build dependencies (Linux)
        if: matrix.target_os == 'linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config libdbus-1-dev protobuf-compiler libprotobuf-dev

      - name: Install build dependencies (macOS)
        if: matrix.target_os == 'macos'
        run: brew install protobuf

      - name: Install build dependencies (Windows)
        if: matrix.target_os == 'windows'
        run: choco install protoc

      - name: Set up Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            external/dojo.c/target
          key: ${{ runner.os }}-cargo-${{ matrix.target_os }}-${{ matrix.arch }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target_os }}-${{ matrix.arch }}-
            ${{ runner.os }}-cargo-${{ matrix.target_os }}-
            ${{ runner.os }}-cargo-

      - name: Add target for macOS builds
        if: matrix.target_os == 'macos'
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            rustup target add aarch64-apple-darwin
          else
            rustup target add x86_64-apple-darwin
          fi

      - name: Install scons
        run: pip install scons

      - name: Cache SCons and godot-cpp build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .sconsign.dblite
            bin/
            external/godot-cpp/bin/
            external/godot-cpp/.sconsign.dblite
            external/godot-cpp/gen/
            external/godot-cpp/__pycache__/
          key: ${{ runner.os }}-scons-${{ matrix.target_os }}-${{ matrix.arch }}-${{ hashFiles('**/*.cpp', '**/*.h', 'SConstruct', 'external/godot-cpp/**/*.cpp', 'external/godot-cpp/**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-scons-${{ matrix.target_os }}-${{ matrix.arch }}-
            ${{ runner.os }}-scons-${{ matrix.target_os }}-

      - name: Build both (release & debug)
        shell: bash
        run: |
          set -e
          PLATFORM_ARG=""
          ARCH_ARG=""
          if [ "${{ matrix.target_os }}" = "macos" ]; then
            PLATFORM_ARG="platform=macos"
            # Set macOS deployment target to 14.0 to ensure compatibility
            export MACOSX_DEPLOYMENT_TARGET=14.0
            # Add deployment target to RUSTFLAGS
            export RUSTFLAGS="${RUSTFLAGS:+$RUSTFLAGS }-C link-arg=-mmacosx-version-min=14.0"
            echo "Setting macOS deployment target to 14.0"
            echo "MACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET"
            echo "RUSTFLAGS=$RUSTFLAGS"

            if [ "${{ matrix.arch }}" = "arm64" ]; then
              ARCH_ARG="arch=arm64"
              export CARGO_BUILD_TARGET=aarch64-apple-darwin
            else
              ARCH_ARG="arch=x86_64"
              export CARGO_BUILD_TARGET=x86_64-apple-darwin
            fi
          elif [ "${{ matrix.target_os }}" = "linux" ]; then
            PLATFORM_ARG="platform=linux"
            ARCH_ARG="arch=x86_64"
            export CARGO_BUILD_TARGET=x86_64-unknown-linux-gnu
          elif [ "${{ matrix.target_os }}" = "windows" ]; then
            PLATFORM_ARG="platform=windows"
            ARCH_ARG="arch=x86_64"
            export CARGO_BUILD_TARGET=x86_64-pc-windows-msvc
          fi

          mkdir -p demo/bin

          # Debug
          scons $PLATFORM_ARG $ARCH_ARG target=template_debug -j2

          # Release
          scons $PLATFORM_ARG $ARCH_ARG target=template_release -j2

      - name: Upload binarios de este target
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.target_os }}-${{ matrix.arch }}
          path: demo/bin/*
          if-no-files-found: error

  package:
    name: Unir todos los binarios y crear zip único
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Descargar todos los binarios de los jobs
        uses: actions/download-artifact@v4
        with:
          path: all_bins

      - name: Preparar carpeta para los binarios
        run: |
          mkdir -p godot-dojo-bin
          find all_bins -type f -exec cp {} godot-dojo-bin/ \;

      - name: Empaquetar en zip único
        run: |
          TAGNAME=${GITHUB_REF##*/}
          ZIP_FILE=godot-dojo-${TAGNAME}.zip
          cd godot-dojo-bin
          zip -r "../$ZIP_FILE" .

      - name: Crear release y subir asset
        uses: softprops/action-gh-release@v2
        with:
          name: "Release ${{ github.ref_name }}"
          files: godot-dojo-${{ github.ref_name }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
