name: Build & Zip All Platforms (cross, local con act)

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build-all:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target_os: linux
            arch: x86_64
          - target_os: windows
            arch: x86_64
          - target_os: macos
            arch: x86_64
          - target_os: macos
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Instalar deps Linux
        if: matrix.target_os == 'linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential pkg-config libdbus-1-dev protobuf-compiler libprotobuf-dev

      - name: Instalar deps Mingw para Windows
        if: matrix.target_os == 'windows'
        run: sudo apt-get update && sudo apt-get install -y mingw-w64

      - name: Instalar toolchain cruzada para macOS
        if: matrix.target_os == 'macos'
        run: |
          sudo apt-get update && sudo apt-get install -y llvm clang cmake libz-dev
          # Aquí deberías instalar osxcross y los toolchains de darwin si los tienes preparados

      - name: Instalar SCons para todos
        run: pip install scons

      - name: Configura toolchain y variables de entorno para cross a cada plataforma
        run: |
          set -e
          PLATFORM_ARG=""
          ARCH_ARG=""
          case "${{ matrix.target_os }}" in
            linux)
              PLATFORM_ARG="platform=linux"
              ARCH_ARG="arch=x86_64"
              export SCONS_ENV_CC=gcc
              export SCONS_ENV_CXX=g++
              ;;
            windows)
              PLATFORM_ARG="platform=windows"
              ARCH_ARG="arch=x86_64"
              export SCONS_ENV_CC=x86_64-w64-mingw32-gcc
              export SCONS_ENV_CXX=x86_64-w64-mingw32-g++
              ;;
            macos)
              PLATFORM_ARG="platform=macos"
              if [ "${{ matrix.arch }}" = "arm64" ]; then
                ARCH_ARG="arch=arm64"
                export SCONS_ENV_CC=aarch64-apple-darwin14-clang
                export SCONS_ENV_CXX=aarch64-apple-darwin14-clang++
              else
                ARCH_ARG="arch=x86_64"
                export SCONS_ENV_CC=x86_64-apple-darwin14-clang
                export SCONS_ENV_CXX=x86_64-apple-darwin14-clang++
              fi
              ;;
          esac

          mkdir -p demo/bin

          # Debug
          scons $PLATFORM_ARG $ARCH_ARG target=debug -j2
          cp godot-dojo.gdextension demo/bin/godot-dojo.${{ matrix.target_os }}.${{ matrix.arch }}.debug.gdextension || true
          if [ "${{ matrix.target_os }}" = "windows" ]; then
            cp bin/dojo_c.dll demo/bin/dojo_c.${{ matrix.target_os }}.${{ matrix.arch }}.debug.dll || true
            cp bin/godot-dojo.dll demo/bin/godot-dojo.${{ matrix.target_os }}.${{ matrix.arch }}.debug.dll || true
            cp bin/godot-dojo.pdb demo/bin/godot-dojo.${{ matrix.target_os }}.${{ matrix.arch }}.debug.pdb || true
          elif [ "${{ matrix.target_os }}" = "linux" ]; then
            cp bin/libgodot-dojo.so demo/bin/libgodot-dojo.${{ matrix.target_os }}.${{ matrix.arch }}.debug.so || true
          elif [ "${{ matrix.target_os }}" = "macos" ]; then
            cp bin/libgodot-dojo.dylib demo/bin/libgodot-dojo.${{ matrix.target_os }}.${{ matrix.arch }}.debug.dylib || true
          fi

          # Release
          scons $PLATFORM_ARG $ARCH_ARG target=release -j2
          cp godot-dojo.gdextension demo/bin/godot-dojo.${{ matrix.target_os }}.${{ matrix.arch }}.release.gdextension || true
          if [ "${{ matrix.target_os }}" = "windows" ]; then
            cp bin/dojo_c.dll demo/bin/dojo_c.${{ matrix.target_os }}.${{ matrix.arch }}.release.dll || true
            cp bin/godot-dojo.dll demo/bin/godot-dojo.${{ matrix.target_os }}.${{ matrix.arch }}.release.dll || true
            cp bin/godot-dojo.pdb demo/bin/godot-dojo.${{ matrix.target_os }}.${{ matrix.arch }}.release.pdb || true
          elif [ "${{ matrix.target_os }}" = "linux" ]; then
            cp bin/libgodot-dojo.so demo/bin/libgodot-dojo.${{ matrix.target_os }}.${{ matrix.arch }}.release.so || true
          elif [ "${{ matrix.target_os }}" = "macos" ]; then
            cp bin/libgodot-dojo.dylib demo/bin/libgodot-dojo.${{ matrix.target_os }}.${{ matrix.arch }}.release.dylib || true
          fi

      - name: Subir binarios resultantes como artifact
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.target_os }}-${{ matrix.arch }}
          path: demo/bin/*
          if-no-files-found: error

  package-zip:
    needs: build-all
    runs-on: ubuntu-latest

    steps:
      - name: Descargar todos los binarios
        uses: actions/download-artifact@v4
        with:
          path: all_bins

      - name: Unir todo y empaquetar
        run: |
          mkdir -p addons/godot-dojo
          find all_bins -type f -exec cp {} addons/godot-dojo/ \;
          ZIP_NAME=godot-dojo-all.zip
          zip -r "$ZIP_NAME" addons

      - name: Subir zip único como artifact
        uses: actions/upload-artifact@v4
        with:
          name: godot-dojo-zip
          path: godot-dojo-all.zip