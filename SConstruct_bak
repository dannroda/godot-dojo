#!/usr/bin/env python
import os
import subprocess
import glob
import shutil

# Colores
G, B, R, Y, X = '\033[92m', '\033[94m', '\033[91m', '\033[1;33m', '\033[0m'

print(f"{B}üöÄ Building godot-dojo{X}")

# Limpieza
if GetOption('clean'):
    print(f"{Y}üßπ Cleaning...{X}")
    try:
        subprocess.run(["cargo", "clean"], cwd="external/dojo.c", check=True)
        shutil.rmtree("demo/bin", ignore_errors=True)
        subprocess.run(["scons", "-C", "external/godot-cpp", "--clean"], check=False)
    except:
        pass
    print(f"{G}‚úÖ Cleanup complete{X}")
    Return()

# Setup
os.makedirs("demo/bin", exist_ok=True)
env = SConscript("external/godot-cpp/SConstruct")
platform, arch, target = env["platform"], env["arch"], env.get("target", "template_debug")

print(f"{B}Building: {platform} ({arch}) - {target}{X}")

# Compilar Rust
print(f"{Y}üì¶ Compiling dojo.c...{X}")

targets = {
    ("windows", "x86_64"): "x86_64-pc-windows-gnu",
    ("linux", "x86_64"): "x86_64-unknown-linux-gnu",
    ("linux", "arm64"): "aarch64-unknown-linux-gnu",
    ("macos", "x86_64"): "x86_64-apple-darwin",
    ("macos", "arm64"): "aarch64-apple-darwin",
    ("web", "wasm32"): "wasm32-unknown-unknown"
}
rust_target = targets.get((platform, arch), "x86_64-unknown-linux-gnu")

cmd = ["cargo", "+nightly", "build", "--target", rust_target]
if target == "template_release":
    cmd.append("--release")

# Variables de entorno para WebAssembly
if platform == "web":
    env_vars = os.environ.copy()
    # cmd.append("--lib")
    cmd.extend(["-Z", "build-std=std,panic_abort"])
    cmd.extend(["--target-dir", "target-web"])  # Usar directorio separado

    rustflags = "-C target-feature=+atomics,+bulk-memory,+mutable-globals"
    rustflags += " -C relocation-model=pic"
    rustflags += " -C opt-level=s"  # Optimizar para tama√±o
    rustflags += " -C panic=abort"  # Usar panic=abort

    env_vars["RUSTFLAGS"] = rustflags

    print(f"  üöÄ {' '.join(cmd)} (WebAssembly)")
    subprocess.run(cmd, check=True, cwd="external/dojo.c", env=env_vars)
else:
    print(f"  üöÄ {' '.join(cmd)}")
    subprocess.run(cmd, check=True, cwd="external/dojo.c")

# Parchear dojo.hpp
print(f"{Y}üîß Patching dojo.hpp...{X}")
with open("external/dojo.c/dojo.hpp", 'r') as f:
    content = f.read()

if "struct Clause;" not in content:
    import re
    match = re.search(r'(namespace\s+\w+\s*{)', content)
    if match:
        pos = match.end()
        content = content[:pos] + '\nstruct Clause;' + content[pos:]
    else:
        content = "struct Clause;\n" + content

    with open("external/dojo.c/dojo.hpp", 'w') as f:
        f.write(content)
    print(f"  ‚úÖ Patched")
else:
    print(f"  ‚ÑπÔ∏è  Already patched")

# Configurar biblioteca
print(f"{Y}üèóÔ∏è Building library...{X}")
env['SHLIBPREFIX'] = ''
env.Append(CPPPATH=["src/", "include/", "external/dojo.c"])

# Linkflag para dbus en Linux
if platform == "linux":
    env.Append(LINKFLAGS=['-ldbus-1'])

elif platform == "web":
    env.Append(LINKFLAGS = ['-sALLOW_MEMORY_GROWTH'])

# Linkear librer√≠as de Rust
build_mode = "release" if target == "template_release" else "debug"
rust_lib_dir = f"external/dojo.c/target/{rust_target}/{build_mode}"

if platform == "windows":
    rust_lib = f"{rust_lib_dir}/dojo_c.lib"
else:
    rust_lib = f"{rust_lib_dir}/libdojo_c.a"

if os.path.exists(rust_lib):
    env.Append(LIBS=[File(rust_lib)])
    print(f"  üìö Linking: {rust_lib}")
else:
    print(f"{R}‚ùå Rust library not found: {rust_lib}{X}")

sources = sorted(glob.glob("src/**/*.cpp", recursive=True))

# Crear biblioteca
suffix_map = {
    "linux": f".linux.{target}.{arch}.so",
    "windows": f".windows.{target}.{arch}.dll",
    "macos": f".macos.{target}.{arch}.dylib",
    "web": f".web.{target}.wasm32.wasm"
}

lib_name = f"demo/bin/godot-dojo{suffix_map.get(platform, f'.{platform}.{target}.{arch}.so')}"
library = env.SharedLibrary(target=lib_name, source=sources)

# Generar .gdextension
with open("plugin_template.gdextension.in", 'r') as f:
    template = f.read()

gdext = template.replace("${PROJECT_NAME}", "godot-dojo")
gdext = gdext.replace("${ENTRY_POINT}", "dojoc_library_init")
gdext = gdext.replace("${GODOT_MIN_REQUIREMENT}", "4.2")

with open("demo/bin/godot-dojo.gdextension", 'w') as f:
    f.write(gdext)

Default(library)
print(f"{G}üéâ Build complete!{X}")